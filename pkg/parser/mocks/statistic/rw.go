// Code generated by mockery. DO NOT EDIT.

package statistic

import mock "github.com/stretchr/testify/mock"

// RW is an autogenerated mock type for the RW type
type RW struct {
	mock.Mock
}

type RW_Expecter struct {
	mock *mock.Mock
}

func (_m *RW) EXPECT() *RW_Expecter {
	return &RW_Expecter{mock: &_m.Mock}
}

// AddFetched provides a mock function with given fields: count
func (_m *RW) AddFetched(count uint) {
	_m.Called(count)
}

// RW_AddFetched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFetched'
type RW_AddFetched_Call struct {
	*mock.Call
}

// AddFetched is a helper method to define mock.On call
//   - count uint
func (_e *RW_Expecter) AddFetched(count interface{}) *RW_AddFetched_Call {
	return &RW_AddFetched_Call{Call: _e.mock.On("AddFetched", count)}
}

func (_c *RW_AddFetched_Call) Run(run func(count uint)) *RW_AddFetched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RW_AddFetched_Call) Return() *RW_AddFetched_Call {
	_c.Call.Return()
	return _c
}

func (_c *RW_AddFetched_Call) RunAndReturn(run func(uint)) *RW_AddFetched_Call {
	_c.Call.Return(run)
	return _c
}

// AddPages provides a mock function with given fields: count
func (_m *RW) AddPages(count uint) {
	_m.Called(count)
}

// RW_AddPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPages'
type RW_AddPages_Call struct {
	*mock.Call
}

// AddPages is a helper method to define mock.On call
//   - count uint
func (_e *RW_Expecter) AddPages(count interface{}) *RW_AddPages_Call {
	return &RW_AddPages_Call{Call: _e.mock.On("AddPages", count)}
}

func (_c *RW_AddPages_Call) Run(run func(count uint)) *RW_AddPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RW_AddPages_Call) Return() *RW_AddPages_Call {
	_c.Call.Return()
	return _c
}

func (_c *RW_AddPages_Call) RunAndReturn(run func(uint)) *RW_AddPages_Call {
	_c.Call.Return(run)
	return _c
}

// AddResolved provides a mock function with given fields: count
func (_m *RW) AddResolved(count uint) {
	_m.Called(count)
}

// RW_AddResolved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddResolved'
type RW_AddResolved_Call struct {
	*mock.Call
}

// AddResolved is a helper method to define mock.On call
//   - count uint
func (_e *RW_Expecter) AddResolved(count interface{}) *RW_AddResolved_Call {
	return &RW_AddResolved_Call{Call: _e.mock.On("AddResolved", count)}
}

func (_c *RW_AddResolved_Call) Run(run func(count uint)) *RW_AddResolved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RW_AddResolved_Call) Return() *RW_AddResolved_Call {
	_c.Call.Return()
	return _c
}

func (_c *RW_AddResolved_Call) RunAndReturn(run func(uint)) *RW_AddResolved_Call {
	_c.Call.Return(run)
	return _c
}

// AddScipped provides a mock function with given fields: count
func (_m *RW) AddScipped(count uint) {
	_m.Called(count)
}

// RW_AddScipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddScipped'
type RW_AddScipped_Call struct {
	*mock.Call
}

// AddScipped is a helper method to define mock.On call
//   - count uint
func (_e *RW_Expecter) AddScipped(count interface{}) *RW_AddScipped_Call {
	return &RW_AddScipped_Call{Call: _e.mock.On("AddScipped", count)}
}

func (_c *RW_AddScipped_Call) Run(run func(count uint)) *RW_AddScipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RW_AddScipped_Call) Return() *RW_AddScipped_Call {
	_c.Call.Return()
	return _c
}

func (_c *RW_AddScipped_Call) RunAndReturn(run func(uint)) *RW_AddScipped_Call {
	_c.Call.Return(run)
	return _c
}

// Fetched provides a mock function with given fields:
func (_m *RW) Fetched() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// RW_Fetched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetched'
type RW_Fetched_Call struct {
	*mock.Call
}

// Fetched is a helper method to define mock.On call
func (_e *RW_Expecter) Fetched() *RW_Fetched_Call {
	return &RW_Fetched_Call{Call: _e.mock.On("Fetched")}
}

func (_c *RW_Fetched_Call) Run(run func()) *RW_Fetched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RW_Fetched_Call) Return(_a0 uint) *RW_Fetched_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RW_Fetched_Call) RunAndReturn(run func() uint) *RW_Fetched_Call {
	_c.Call.Return(run)
	return _c
}

// Pages provides a mock function with given fields:
func (_m *RW) Pages() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// RW_Pages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pages'
type RW_Pages_Call struct {
	*mock.Call
}

// Pages is a helper method to define mock.On call
func (_e *RW_Expecter) Pages() *RW_Pages_Call {
	return &RW_Pages_Call{Call: _e.mock.On("Pages")}
}

func (_c *RW_Pages_Call) Run(run func()) *RW_Pages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RW_Pages_Call) Return(_a0 uint) *RW_Pages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RW_Pages_Call) RunAndReturn(run func() uint) *RW_Pages_Call {
	_c.Call.Return(run)
	return _c
}

// Resolved provides a mock function with given fields:
func (_m *RW) Resolved() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// RW_Resolved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolved'
type RW_Resolved_Call struct {
	*mock.Call
}

// Resolved is a helper method to define mock.On call
func (_e *RW_Expecter) Resolved() *RW_Resolved_Call {
	return &RW_Resolved_Call{Call: _e.mock.On("Resolved")}
}

func (_c *RW_Resolved_Call) Run(run func()) *RW_Resolved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RW_Resolved_Call) Return(_a0 uint) *RW_Resolved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RW_Resolved_Call) RunAndReturn(run func() uint) *RW_Resolved_Call {
	_c.Call.Return(run)
	return _c
}

// Scipped provides a mock function with given fields:
func (_m *RW) Scipped() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// RW_Scipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scipped'
type RW_Scipped_Call struct {
	*mock.Call
}

// Scipped is a helper method to define mock.On call
func (_e *RW_Expecter) Scipped() *RW_Scipped_Call {
	return &RW_Scipped_Call{Call: _e.mock.On("Scipped")}
}

func (_c *RW_Scipped_Call) Run(run func()) *RW_Scipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RW_Scipped_Call) Return(_a0 uint) *RW_Scipped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RW_Scipped_Call) RunAndReturn(run func() uint) *RW_Scipped_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *RW) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RW_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type RW_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *RW_Expecter) String() *RW_String_Call {
	return &RW_String_Call{Call: _e.mock.On("String")}
}

func (_c *RW_String_Call) Run(run func()) *RW_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RW_String_Call) Return(_a0 string) *RW_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RW_String_Call) RunAndReturn(run func() string) *RW_String_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRW interface {
	mock.TestingT
	Cleanup(func())
}

// NewRW creates a new instance of RW. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRW(t mockConstructorTestingTNewRW) *RW {
	mock := &RW{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
